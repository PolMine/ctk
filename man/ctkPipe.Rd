% Generated by roxygen2 (4.1.1): do not edit by hand
% Please edit documentation in R/ctkPipe_class.R, R/ctkPipe_class_methods.R, R/cwbImport_method.R, R/describeDir_method.R, R/findReplace_method.R, R/fixVrt_method.R, R/init_method.R, R/rsync_method.R, R/sAttributeList_method.R, R/tokenizeSentences_method.R, R/treetagger_method.R, R/xslt_method.R
\docType{methods}
\name{ctkPipe}
\alias{adjustEncoding}
\alias{adjustEncoding,ctkPipe-method}
\alias{ctkPipe}
\alias{cwbImport}
\alias{cwbImport,ctkPipe-method}
\alias{describeDir}
\alias{describeDir,ctkPipe-method}
\alias{findReplace}
\alias{findReplace,ctkPipe-method}
\alias{fixVrt,ctkPipe-method}
\alias{init,ctkPipe-method}
\alias{rsync}
\alias{rsync,ctkPipe-method}
\alias{sAttributeList}
\alias{sAttributeList,ctkPipe-method}
\alias{saveProject}
\alias{saveProject,ctkPipe-method}
\alias{show,ctkPipe-method}
\alias{summary,ctkPipe-method}
\alias{tokenizeSentences}
\alias{tokenizeSentences,ctkPipe-method}
\alias{treetagger}
\alias{treetagger,ctkPipe-method}
\alias{xslt}
\alias{xslt,ctkPipe-method}
\title{constructor for a ctkPipe object}
\usage{
ctkPipe(projectDir)

\S4method{show}{ctkPipe}(object)

\S4method{summary}{ctkPipe}(object)

\S4method{cwbImport}{ctkPipe}(.Object, corpus, sourceDir, xml = TRUE,
  verbose = TRUE, ...)

\S4method{describeDir}{ctkPipe}(object, dirDesc)

\S4method{findReplace}{ctkPipe}(object, sourceDir, targetDir, replacements,
  pattern = NULL, mc = FALSE, progress = TRUE, verbose = FALSE,
  sample = FALSE, files = NULL, continue = FALSE, failsafe = FALSE, ...)

\S4method{fixVrt}{ctkPipe}(.Object, sourceDir, targetDir, pattern = NULL,
  mc = FALSE, progress = TRUE, verbose = FALSE, sample = FALSE,
  files = NULL, continue = FALSE, failsafe = FALSE)

\S4method{init}{ctkPipe}(object)

\S4method{rsync}{ctkPipe}(object)

\S4method{sAttributeList}{ctkPipe}(.Object, sourceDir, mc = TRUE)

\S4method{tokenizeSentences}{ctkPipe}(.Object, sourceDir = "xml",
  targetDir = "xmlAnno", targetElement = "p", para = FALSE, mc = FALSE,
  verbose = FALSE, progress = TRUE)

\S4method{treetagger}{ctkPipe}(.Object, sourceDir = "xml",
  targetDir = "vrt", py = FALSE, parallel = FALSE, lang = "de",
  fix = FALSE, verbose = TRUE, pattern = "xml", mc = FALSE,
  continue = FALSE, progress = FALSE, sample = FALSE, files = NULL,
  failsafe = FALSE)

\S4method{xslt}{ctkPipe}(.Object, sourceDir, targetDir, xslFile,
  pattern = "xml", mc = FALSE, verbose = TRUE, continue = FALSE,
  progress = FALSE, sample = FALSE, filenames = NULL, failsafe = FALSE,
  ...)
}
\arguments{
\item{projectDir}{the directory with the project}

\item{object}{a ctkPipe object}

\item{.Object}{from time to time}

\item{corpus}{CWB corpus name that shall be created}

\item{xml}{logical}

\item{dirDesc}{a named character vector (names are dirs, values descriptions of the dirs)}

\item{replacements}{a list}

\item{progress}{whether to use progress bar}

\item{targetElement}{where to finde the text nodes}

\item{para}{logical, whether to annotate paragraphs}

\item{lang}{the language to be used (defaults to 'de')}

\item{xslFile}{file for the xsl transformation}

\item{checkValidity}{whether to validate XML in targetDir}

\item{mkdir}{logical, whether to create the outDir, if it does not yet exist}
}
\value{
a ctkPipe object

the output of the procedure

the verbose output of the tagging script that is called

return of the saxon parser
}
\description{
constructor for a ctkPipe object

Convert XML input files into a tagged corpus
}
\author{
Andreas Blaette
}

